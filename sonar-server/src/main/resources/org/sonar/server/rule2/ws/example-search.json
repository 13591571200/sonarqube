{
  "total": 2,
  "p": 1,
  "ps": 25,
  "rules": [
    {
      "key": "squid:S1067",
      "repo": "squid",
      "name": "Expressions should not be too complex",
      "htmlDesc": "<p>\nThe complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.\nA single expression's complexity should not become too high to keep the code readable.\n</p>\n\n<p>The following code, with a maximum complexity of 3:</p>\n\n<pre>\nif (condition1 && condition2 && condition3 && condition4) { /* ... */ } // Non-Compliant\n</pre>\n\n<p>could be refactored into something like:</p>\n\n<pre>\nif (relevantMethodName1() && relevantMethodName2()) { /* ... */ } // Compliant\n\n/* ... */\n\nprivate boolean relevantMethodName1() {\n return condition1 && condition2;\n}\n\nprivate boolean relevantMethodName2() {\n return condition3 && condition4;\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "internalKey": "S1067",
      "template": false,
      "tags": [ ],
      "sysTags": [
        "brain-overload"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "max",
          "desc": "Maximum number of allowed conditional operators in an expression",
          "defaultValue": "3"
        }
      ]
    },
    {
      "key": "squid:S1168",
      "repo": "squid",
      "name": "Empty arrays and collections should be returned instead of null",
      "htmlDesc": "<p>\nReturning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.\nMoreover, in many cases, <code>null</code> is used as a synonym for empty.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic static Result[] getResults() {\n return null; // Non-Compliant\n}\n\npublic static void main(String[] args) {\n Result[] results = getResults();\n\n if (results != null) { // Nullity test required to prevent NPE\n for (Result result: results) {\n /* ... */\n }\n }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic static Result[] getResults() {\n return new Result[0]; // Compliant\n}\n\npublic static void main(String[] args) {\n for (Result result: getResults()) {\n /* ... */\n }\n}\n</pre>\n\n<p>This rule also applies to collections:</p>\n\n<pre>\npublic static List&lt;Result&gt; getResults() {\n return null; // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic static List&lt;Result&gt; getResults() {\n return Collections.emptyList(); // Compliant\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "internalKey": "S1168",
      "template": false,
      "tags": [ ],
      "sysTags": [ ],
      "lang": "java",
      "langName": "Java",
      "params": [ ]
    }
  ]
}
