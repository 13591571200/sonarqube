{"total": 4, "p": 1, "ps": 3, "rules": [
    {
        "key": "squid:S1067",
        "repo": "squid",
        "name": "Expressions should not be too complex",
        "htmlDesc": "<p>\nThe complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.\nA single expression's complexity should not become too high to keep the code readable.\n</p>\n\n<p>The following code, with a maximum complexity of 3:</p>\n\n<pre>\nif (condition1 && condition2 && condition3 && condition4) { /* ... */ }  // Non-Compliant\n</pre>\n\n<p>could be refactored into something like:</p>\n\n<pre>\nif (relevantMethodName1() && relevantMethodName2()) { /* ... */ }        // Compliant\n\n/* ... */\n\nprivate boolean relevantMethodName1() {\n  return condition1 && condition2;\n}\n\nprivate boolean relevantMethodName2() {\n  return condition3 && condition4;\n}\n</pre>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "S1067",
        "template": false,
        "tags": [],
        "sysTags": ["brain-overload"],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "desc": "Maximum number of allowed conditional operators in an expression",
                "defaultValue": "3"
            }
        ]
    },
    {
        "key": "squid:ClassCyclomaticComplexity",
        "repo": "squid",
        "name": "Avoid too complex class",
        "htmlDesc": "<p>The Cyclomatic Complexity is measured by the number of (&&, ||)\n\toperators and (if, while, do, for, ?:, catch, switch, case, return,\n\tthrow) statements in the body of a class plus one for each constructor,\n\tmethod (but not getter/setter), static initializer, or instance\n\tinitializer in the class. The last return stament in method, if exists,\n\tis not taken into account.</p>\n<p>\n\tEven when the Cyclomatic Complexity of a class is very high, this\n\tcomplexity might be well distributed among all methods. Nevertheless,\n\tmost of the time, a very complex class is a class which breaks the <a\n\t\thref='http://en.wikipedia.org/wiki/Single_responsibility_principle'>Single\n\t\tResponsibility Principle</a> and which should be re-factored to be split\n\tin several classes.\n</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "ClassCyclomaticComplexity",
        "template": false,
        "tags": [],
        "sysTags": ["brain-overload"],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "desc": "Maximum complexity allowed.",
                "defaultValue": "200"
            }
        ]
    },
    {
        "key": "squid:MethodCyclomaticComplexity",
        "repo": "squid",
        "name": "Methods should not be too complex",
        "htmlDesc": "<p>The Cyclomatic Complexity is measured by the number of\n\t(&amp;&amp;, ||) operators and (if, while, do, for, ?:, catch, switch,\n\tcase, return, throw) statements in the body of a class plus one for\n\teach constructor, method (but not getter/setter), static initializer,\n\tor instance initializer in the class. The last return stament in\n\tmethod, if exists, is not taken into account.</p>\n<p>\n\tEven when the Cyclomatic Complexity of a class is very high, this\n\tcomplexity might be well distributed among all methods. Nevertheless,\n\tmost of the time, a very complex class is a class which breaks the <a\n\t\thref=\"http://en.wikipedia.org/wiki/Single_responsibility_principle\">Single\n\t\tResponsibility Principle</a> and which should be re-factored to be split\n\tin several classes.\n</p>",
        "severity": "MAJOR",
        "status": "READY",
        "internalKey": "MethodCyclomaticComplexity",
        "template": false,
        "tags": [],
        "sysTags": ["brain-overload"],
        "lang": "java",
        "langName": "Java",
        "params": [
            {
                "key": "max",
                "desc": "Maximum complexity allowed.",
                "defaultValue": "10"
            }
        ]
    }
], "actives": {
    "squid:MethodCyclomaticComplexity": [
        {
            "qProfile": "Sonar way with Findbugs:java",
            "inherit": "NONE",
            "severity": "MAJOR",
            "params": [
                {
                    "key": "max",
                    "value": "10"
                }
            ]
        },
        {
            "qProfile": "Sonar way:java",
            "inherit": "NONE",
            "severity": "MAJOR",
            "params": [
                {
                    "key": "max",
                    "value": "10"
                }
            ]
        }
    ],
    "squid:S1067": [
        {
            "qProfile": "Sonar way with Findbugs:java",
            "inherit": "NONE",
            "severity": "MAJOR",
            "params": [
                {
                    "key": "max",
                    "value": "3"
                }
            ]
        },
        {
            "qProfile": "Sonar way:java",
            "inherit": "NONE",
            "severity": "MAJOR",
            "params": [
                {
                    "key": "max",
                    "value": "3"
                }
            ]
        }
    ],
    "squid:ClassCyclomaticComplexity": [
        {
            "qProfile": "Sonar way with Findbugs:java",
            "inherit": "NONE",
            "severity": "MAJOR",
            "params": [
                {
                    "key": "max",
                    "value": "200"
                }
            ]
        },
        {
            "qProfile": "Sonar way:java",
            "inherit": "NONE",
            "severity": "MAJOR",
            "params": [
                {
                    "key": "max",
                    "value": "200"
                }
            ]
        }
    ]
}}