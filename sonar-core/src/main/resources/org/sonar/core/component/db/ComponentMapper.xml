<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.sonar.core.component.db.ComponentMapper">

  <sql id="componentColumns">
    p.id,
    p.uuid as uuid,
    p.project_uuid as projectUuid,
    p.module_uuid as moduleUuid,
    p.module_uuid_path as moduleUuidPath,
    p.kee as kee,
    p.deprecated_kee as deprecatedKey,
    p.name as name,
    p.long_name as longName,
    p.qualifier as qualifier,
    p.scope as scope,
    p.language as language,
    p.root_id as parentProjectId,
    p.path as path,
    p.enabled as enabled,
    p.authorization_updated_at as authorizationUpdatedAt,
    p.created_at as createdAt
  </sql>

  <sql id="authorizedComponentColumns">
    p.id,
    p.uuid as uuid,
    p.kee as kee,
    p.qualifier as qualifier,
    p.scope as scope
  </sql>

  <select id="selectByKey" parameterType="String" resultType="Component">
    SELECT <include refid="componentColumns"/>
    FROM projects p
    <where>
      AND p.kee=#{key}
    </where>
  </select>

  <select id="selectById" parameterType="long" resultType="Component">
    SELECT <include refid="componentColumns"/>
    FROM projects p
    <where>
      AND p.id=#{id}
    </where>
  </select>

  <select id="selectByUuid" parameterType="String" resultType="Component">
    SELECT <include refid="componentColumns"/>
    FROM projects p
    <where>
      AND p.uuid=#{uuid}
    </where>
  </select>

  <select id="countById" parameterType="long" resultType="long">
    SELECT count(p.id)
    FROM projects p
    <where>
      AND p.id=#{id}
    </where>
  </select>

  <select id="selectRootProjectByKey" parameterType="String" resultType="Component">
    SELECT rootProject.*
    FROM projects p
    INNER JOIN projects rootProject ON rootProject.uuid=p.project_uuid
    <where>
      AND p.kee=#{componentKey}
    </where>
  </select>

  <select id="selectParentModuleByKey" parameterType="String" resultType="Component">
    SELECT <include refid="componentColumns"/>
    FROM projects p
    INNER JOIN snapshots s ON s.project_id=p.id AND s.islast=${_true}
    INNER JOIN snapshots child_snapshots ON child_snapshots.parent_snapshot_id=s.id AND child_snapshots.islast=${_true}
    INNER JOIN projects child ON child.id=child_snapshots.project_id AND child.enabled=${_true} AND child.kee=#{key}
    <where>
      AND p.enabled=${_true}
      AND p.scope='PRJ'
    </where>
  </select>

  <select id="findModulesByProject" parameterType="String" resultType="Component">
    SELECT <include refid="componentColumns"/>
    FROM projects p
    INNER JOIN snapshots s ON s.project_id=p.id AND s.islast=${_true}
    INNER JOIN snapshots parent_snapshots ON parent_snapshots.id=s.parent_snapshot_id AND parent_snapshots.islast=${_true}
    INNER JOIN projects parent ON parent.id=parent_snapshots.project_id AND parent.enabled=${_true} AND parent.kee=#{projectKey}
    <where>
      AND p.enabled=${_true}
      AND p.scope='PRJ'
    </where>
  </select>

  <select id="findByKeys" parameterType="String" resultType="Component">
    select <include refid="componentColumns"/>
    from projects p
    <where>
      p.enabled=${_true}
      and p.kee in
      <foreach collection="keys" open="(" close=")" item="key" separator=",">
        #{key}
      </foreach>
    </where>
  </select>

  <select id="findByUuids" parameterType="String" resultType="Component">
    select <include refid="componentColumns"/>
    from projects p
    <where>
      and p.uuid in
      <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">
        #{uuid}
      </foreach>
    </where>
  </select>

  <select id="findSubProjectsByComponentUuids" parameterType="String" resultType="Component">
    SELECT <include refid="componentColumns"/>
    FROM projects p
    INNER JOIN projects child ON child.root_id=p.id AND child.enabled=${_true}
    <where>
      AND p.enabled=${_true}
      AND p.scope='PRJ'
      AND child.uuid in
      <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">
        #{uuid}
      </foreach>
    </where>
  </select>

  <select id="findChildrenModulesFromModule" parameterType="String" resultType="ProjectRefentialsComponent">
    SELECT <include refid="componentColumns"/>, parent.kee as parentModuleKey
    FROM projects p
    INNER JOIN (<include refid="org.sonar.core.component.db.SnapshotMapper.selectChildrenModulesFromModuleQuery" />) snapshotModules on snapshotModules.resourceId=p.id
    LEFT OUTER JOIN snapshots parent_snapshot on parent_snapshot.id = snapshotModules.parentId
    LEFT OUTER JOIN projects parent on parent.id = parent_snapshot.project_id
  </select>

  <select id="findProjectUuids" resultType="String">
    SELECT p.uuid
    FROM projects p
    <where>
      AND p.enabled=${_true}
      AND p.scope='PRJ'
      AND p.qualifier='TRK'
    </where>
  </select>

  <sql id="insertColumns">
    (kee, deprecated_kee, uuid, project_uuid, module_uuid, module_uuid_path, name, long_name, qualifier, scope, language, root_id, path, enabled, created_at, authorization_updated_at)
  </sql>

  <insert id="insert" parameterType="Component" keyColumn="id" useGeneratedKeys="true" keyProperty="id">
    insert into projects <include refid="insertColumns"/>
    values (#{kee}, #{deprecatedKey}, #{uuid}, #{projectUuid}, #{moduleUuid}, #{moduleUuidPath}, #{name}, #{longName}, #{qualifier}, #{scope},
      #{language}, #{parentProjectId}, #{path}, #{enabled}, #{createdAt}, #{authorizationUpdatedAt})
  </insert>

  <delete id="deleteByKey" parameterType="String">
    delete from projects where kee=#{key}
  </delete>

</mapper>

