<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.core.resource.ResourceMapper">

  <resultMap id="snapshotResultMap" type="Snapshot">
    <id property="id" column="id"/>
    <result property="parentId" column="parent_snapshot_id"/>
    <result property="rootId" column="root_snapshot_id"/>
    <result property="date" column="created_at"/>
    <result property="buildDate" column="build_date"/>
    <result property="resourceId" column="project_id"/>
    <result property="status" column="status"/>
    <result property="purgeStatus" column="purge_status"/>
    <result property="last" column="islast"/>
    <result property="scope" column="scope"/>
    <result property="qualifier" column="qualifier"/>
    <result property="version" column="version"/>
    <result property="path" column="path"/>
    <result property="depth" column="depth"/>
    <result property="rootProjectId" column="root_project_id"/>
  </resultMap>

  <resultMap id="resourceResultMap" type="Resource">
    <id property="id" column="id"/>
    <result property="key" column="kee"/>
    <result property="name" column="name"/>
    <result property="longName" column="long_name"/>
    <result property="rootId" column="root_id"/>
    <result property="scope" column="scope"/>
    <result property="qualifier" column="qualifier"/>
    <result property="enabled" column="enabled"/>
    <result property="description" column="description"/>
    <result property="language" column="language"/>
    <result property="copyResourceId" column="copy_resource_id"/>
    <result property="personId" column="person_id"/>
    <result property="createdAt" column="created_at"/>
  </resultMap>

  <select id="selectResources" parameterType="map" resultMap="resourceResultMap">
    select *
    from projects p
    <where>
      <if test="qualifiers != null and qualifiers.length!=0">
        and p.qualifier in
        <foreach item="qualifier" index="index" collection="qualifiers" open="(" separator="," close=")">#{qualifier}</foreach>
      </if>
      <if test="key != null">
        and p.kee=#{key}
      </if>
      <if test="excludeDisabled">
        and p.enabled=${_true}
      </if>
    </where>
  </select>

  <select id="selectResourceIds" parameterType="map" resultType="long">
    select p.id
    from projects p
    <where>
      <if test="qualifiers != null and qualifiers.length!=0">
        and p.qualifier in
        <foreach item="qualifier" index="index" collection="qualifiers" open="(" separator="," close=")">#{qualifier}</foreach>
      </if>
      <if test="key != null">
        and p.kee=#{key}
      </if>
      <if test="excludeDisabled">
        and p.enabled=${_true}
      </if>
    </where>
  </select>

  <select id="selectResource" parameterType="long" resultMap="resourceResultMap">
    select * from projects where id=#{id}
  </select>

  <select id="selectResourcesById" parameterType="map" resultMap="resourceResultMap">
    select * from projects p where p.enabled=${_true} and
    <foreach collection="ids" open="p.id in (" close=")" item="list" separator=") or p.id in (" >
      <foreach collection="list" item="element" separator=",">
        #{element}
      </foreach>
    </foreach>

  </select>

  <select id="selectSnapshot" parameterType="long" resultMap="snapshotResultMap">
    select * from snapshots where id=#{id}
  </select>

  <select id="selectLastSnapshotByResourceKey" parameterType="string" resultMap="snapshotResultMap">
    select s.* from snapshots s, projects p where p.kee=#{id} and p.enabled=${_true} and p.copy_resource_id is null and s.islast=${_true} and p.id=s.project_id
  </select>

  <select id="selectLastSnapshotByResourceId" parameterType="string" resultMap="snapshotResultMap">
      select s.* from snapshots s where s.project_id=#{id} and s.islast=${_true}
    </select>

  <select id="selectDescendantProjects" parameterType="long" resultMap="resourceResultMap">
    select * from projects where scope='PRJ' and root_id=#{id}
  </select>

  <select id="selectRootProjectByComponentKey" parameterType="string" resultMap="resourceResultMap">
    select rootProject.*
    from projects p
    inner join snapshots s on s.project_id=p.id and s.islast=${_true}
    inner join projects rootProject on rootProject.id=s.root_project_id
    <where>
      and p.kee=#{componentKey}
    </where>
  </select>

  <select id="selectRootProjectByComponentId" parameterType="long" resultMap="resourceResultMap">
    select rootProject.*
    from snapshots s
    inner join projects rootProject on rootProject.id=s.root_project_id
    <where>
      and s.project_id=#{componentId}
      and s.islast=${_true}
    </where>
  </select>

  <select id="selectChildrenComponentIds" parameterType="map" resultType="int">
    <include refid="selectChildrenComponentIdsQuery" />
  </select>

  <sql id="selectChildrenComponentIdsQuery">
    -- project ids of the children of a component which is not PRJ/TRK
    select children.project_id
    from snapshots children
    inner join (
      select rootSnapshot.id, rootSnapshot.root_snapshot_id, rootSnapshot.path
      from snapshots rootSnapshot
      inner join (
        <include refid="org.sonar.core.resource.ResourceMapper.selectProjectIdsFromComponentKeysQuery" />
      ) rootProject on rootProject.id = rootSnapshot.project_id
      and rootSnapshot.islast=${_true}
      and rootSnapshot.root_snapshot_id is not null
    ) rootSnapshot on children.root_snapshot_id = rootSnapshot.root_snapshot_id
    and
    <choose>
      <when test="_databaseId == 'mssql'">
        children.path LIKE rootSnapshot.path + CAST(rootSnapshot.id AS varchar(15)) + '.%'
      </when>
      <when test="_databaseId == 'mysql'">
        children.path LIKE concat(rootSnapshot.path, rootSnapshot.id, '.%')
      </when>
      <otherwise>
        children.path LIKE rootSnapshot.path || rootSnapshot.id || '.%'
      </otherwise>
    </choose>
    union
    -- project ids of the children of a PRJ/TRK component
    select children.project_id
    from snapshots children
    inner join (
      select rootSnapshot.id
      from snapshots rootSnapshot
      inner join (
        <include refid="org.sonar.core.resource.ResourceMapper.selectProjectIdsFromComponentKeysQuery" />
      ) rootProject on rootProject.id = rootSnapshot.project_id
      and rootSnapshot.islast=${_true}
      and rootSnapshot.root_snapshot_id is null
    ) rootSnapshot on children.root_snapshot_id = rootSnapshot.id
    union
    -- project id of the component itself
    <include refid="org.sonar.core.resource.ResourceMapper.selectProjectIdsFromComponentKeysQuery" />
  </sql>

  <sql id="selectProjectIdsFromComponentKeysQuery">
    select p.id from projects p
    <where>
      p.enabled=${_true}
      and p.kee in <foreach item="componentKey" index="index" collection="componentRootKeys" open="(" separator="," close=")">#{componentKey}</foreach>
    </where>
  </sql>

  <insert id="insert" parameterType="Resource" useGeneratedKeys="true" keyProperty="id">
    insert into projects
    (name, long_name, description, scope, qualifier, kee, language, root_id, copy_resource_id, person_id, enabled, created_at)
    values (
    #{name}, #{longName}, #{description}, #{scope}, #{qualifier},
    #{key}, #{language}, #{rootId}, #{copyResourceId},
    #{personId}, #{enabled}, #{createdAt}
    )
  </insert>

  <!-- Oracle -->
  <insert id="insert" databaseId="oracle" parameterType="Resource" useGeneratedKeys="true" keyProperty="id">
    <selectKey order="BEFORE" resultType="Long" keyProperty="id">
      select projects_seq.NEXTVAL from DUAL
    </selectKey>
    insert into projects
    (id, name, long_name, description, scope, qualifier, kee, language, root_id, copy_resource_id, person_id, enabled, created_at)
    values (
    #{id}, #{name}, #{longName}, #{description}, #{scope}, #{qualifier},
    #{key}, #{language}, #{rootId}, #{copyResourceId},
    #{personId}, #{enabled}, #{createdAt}
    )
  </insert>

  <update id="update" parameterType="Resource">
    update projects set name=#{name}, long_name=#{longName}, description=#{description},
    scope=#{scope}, qualifier=#{qualifier}, kee=#{key},
    language=#{language}, root_id=#{rootId}, copy_resource_id=#{copyResourceId},
    person_id=#{personId}, enabled=#{enabled} where id=#{id}
  </update>
</mapper>

