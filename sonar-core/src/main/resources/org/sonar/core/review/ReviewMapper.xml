<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.core.review.ReviewMapper">

  <sql id="reviewColumns">
    r.id, r.created_at as createdAt, r.updated_at as updatedAt, r.user_id as userId, r.assignee_id as assigneeId,
    r.status as status, r.resolution as resolution, r.title as title, r.severity as severity,
    r.rule_failure_permanent_id as violationPermanentId, r.project_id as projectId, r.resource_id as resourceId, r.resource_line as line, r.rule_id as ruleId,
    r.manual_severity as manualSeverity, r.manual_violation as manualViolation, r.data as data
  </sql>

  <select id="findById" parameterType="long" resultType="Review">
    select <include refid="reviewColumns"/>, apr.action_plan_id as actionPlanId
    from reviews r left outer join action_plans_reviews apr on r.id=apr.review_id
    where r.id=#{id}
  </select>

  <select id="selectByResourceId" parameterType="long" resultType="Review">
    select <include refid="reviewColumns"/>, apr.action_plan_id as actionPlanId
    from reviews r left outer join action_plans_reviews apr on r.id=apr.review_id
    where r.resource_id=#{id} and r.status &lt;&gt; 'CLOSED'
  </select>

  <update id="update" parameterType="Review">
    update reviews set
    created_at=#{createdAt},
    updated_at=#{updatedAt},
    user_id=#{userId},
    assignee_id=#{assigneeId},
    status=#{status},
    resolution=#{resolution},
    title=#{title},
    severity=#{severity},
    rule_failure_permanent_id=#{violationPermanentId},
    project_id=#{projectId},
    resource_id=#{resourceId},
    resource_line=#{line},
    rule_id=#{ruleId},
    manual_severity=#{manualSeverity},
    manual_violation=#{manualViolation},
    data=#{data}
    where id = #{id}
  </update>

  <select id="selectOnDeletedResources" parameterType="long" resultType="Review">
    select <include refid="reviewColumns"/>
    from reviews r
    where r.status &lt;&gt; 'CLOSED' and r.project_id=#{rootProjectId} and r.resource_id in (
    select prev.project_id from snapshots prev where prev.root_project_id=#{rootProjectId}
    and prev.islast=${_true} and not exists(
    select cur.id from snapshots cur where root_snapshot_id=#{rootSnapshotId} and cur.created_at &gt; prev.created_at AND cur.root_project_id=#{rootProjectId} AND
    cur.project_id=prev.project_id))
  </select>
</mapper>

