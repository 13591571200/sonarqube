<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mappei.dtd">

<mapper namespace="org.sonar.core.issue.db.IssueMapper">

  <sql id="issueColumns">
    i.id,
    i.kee as kee,
    i.resource_id as resourceId,
    i.rule_id as ruleId,
    i.action_plan_key as actionPlanKey,
    i.severity as severity,
    i.manual_severity as manualSeverity,
    i.message as message,
    i.line as line,
    i.effort_to_fix as effortToFix,
    i.status as status,
    i.resolution as resolution,
    i.checksum as checksum,
    i.reporter as reporter,
    i.assignee as assignee,
    i.author_login as authorLogin,
    i.issue_attributes as issueAttributes,
    i.issue_creation_date as issueCreationDate,
    i.issue_update_date as issueUpdateDate,
    i.issue_close_date as issueCloseDate,
    i.created_at as createdAt,
    i.updated_at as updatedAt,
    r.plugin_rule_key as ruleKey,
    r.plugin_name as ruleRepo,
    p.kee as componentKey
  </sql>

  <sql id="sortFilter">
    <if test="sort != null">
      order by
      <choose>
        <when test="'SEVERITY'.equals(sort.name())">
          i.severity
        </when>
        <when test="'STATUS'.equals(sort.name())">
          i.status
        </when>
        <when test="'ASSIGNEE'.equals(sort.name())">
          i.assignee
        </when>
        <when test="'CREATION_DATE'.equals(sort.name())">
          i.issue_creation_date
        </when>
        <when test="'UPDATE_DATE'.equals(sort.name())">
          i.issue_update_date
        </when>
        <when test="'CLOSE_DATE'.equals(sort.name())">
          i.issue_close_date
        </when>
      </choose>
      <choose>
        <when test="true.equals(asc)">
          asc
        </when>
        <otherwise>
          desc
        </otherwise>
      </choose>
    </if>
  </sql>

  <insert id="insert" parameterType="Issue" useGeneratedKeys="false" keyProperty="id">
    INSERT INTO issues (kee, resource_id, rule_id, action_plan_key, severity, manual_severity,
    message, line, effort_to_fix, status,
    resolution, checksum, reporter, assignee, author_login, issue_attributes, issue_creation_date, issue_update_date,
    issue_close_date, created_at, updated_at)
    VALUES (#{kee}, #{resourceId}, #{ruleId}, #{actionPlanKey}, #{severity}, #{manualSeverity},
    #{message}, #{line}, #{effortToFix}, #{status},
    #{resolution}, #{checksum}, #{reporter}, #{assignee}, #{authorLogin}, #{issueAttributes}, #{issueCreationDate},
    #{issueUpdateDate}, #{issueCloseDate}, #{createdAt}, #{updatedAt})
  </insert>

  <!-- Oracle -->
  <insert id="insert" databaseId="oracle" parameterType="Issue" keyColumn="id" useGeneratedKeys="false"
          keyProperty="id">
    <selectKey order="BEFORE" resultType="Long" keyProperty="id">
      select issues_seq.NEXTVAL from DUAL
    </selectKey>
    INSERT INTO issues (id, kee, resource_id, rule_id, action_plan_key, severity, manual_severity,
    message, line, effort_to_fix, status,
    resolution, checksum, reporter, assignee, author_login, issue_attributes, issue_creation_date, issue_update_date,
    issue_close_date, created_at, updated_at)
    VALUES (#{id}, #{kee}, #{resourceId}, #{ruleId}, #{actionPlanKey}, #{severity}, #{manualSeverity},
    #{message}, #{line}, #{effortToFix}, #{status},
    #{resolution}, #{checksum}, #{reporter}, #{assignee}, #{authorLogin}, #{issueAttributes}, #{issueCreationDate},
    #{issueUpdateDate}, #{issueCloseDate}, #{createdAt}, #{updatedAt})
  </insert>

  <!--
    IMPORTANT - invariant columns can't be updated. See IssueDto#toDtoForUpdate()
  -->
  <update id="update" parameterType="Issue">
    update issues set
    action_plan_key=#{actionPlanKey},
    severity=#{severity},
    manual_severity=#{manualSeverity},
    message=#{message},
    line=#{line},
    effort_to_fix=#{effortToFix},
    status=#{status},
    resolution=#{resolution},
    checksum=#{checksum},
    reporter=#{reporter},
    assignee=#{assignee},
    author_login=#{authorLogin},
    issue_attributes=#{issueAttributes},
    issue_creation_date=#{issueCreationDate},
    issue_update_date=#{issueUpdateDate},
    issue_close_date=#{issueCloseDate},
    updated_at=#{updatedAt}
    where kee = #{kee}
  </update>

  <select id="selectByKey" parameterType="String" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i, rules r, projects p
    where i.kee=#{kee} and i.rule_id=r.id and p.id=i.resource_id
  </select>

  <select id="selectNonClosedIssues" parameterType="int" resultType="Issue">
    select distinct
    <include refid="issueColumns"/>
    from issues i, rules r, projects p
    where i.status &lt;&gt; 'CLOSED'
    and (p.root_id=#{id} or (p.root_id is null and p.id=#{id}))
    and i.resource_id=p.id
    and r.id=i.rule_id
  </select>

  <select id="selectByIds" parameterType="map" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i, rules r, projects p
    <where>
      and
      <foreach collection="ids" open="i.id in (" close=")" item="list" separator=") or i.id in (">
        <foreach collection="list" item="element" separator=",">
          #{element}
        </foreach>
      </foreach>
      and i.rule_id=r.id
      and p.id=i.resource_id
    </where>
    <include refid="sortFilter"/>
  </select>

  <select id="selectIssueAndComponentIds" parameterType="map" resultType="Issue">
    select i.id, i.resource_id as resourceId
    <include refid="selectQueryConditions"/>
  </select>

  <select id="select" parameterType="map" resultType="Issue">
    select
    <include refid="issueColumns"/>
    <include refid="selectQueryConditions"/>
  </select>

  <sql id="selectQueryConditions">
    from issues i, projects p, rules r
    <if test="componentRoots != null and componentRoots.size() > 0">
      , projects rootprojects, snapshots rootsnapshots, snapshots s
    </if>
    <if test="components != null and components.size() > 0">
      , projects project_component
    </if>
    <where>
      and i.resource_id=p.id
      and i.rule_id=r.id
      <if test="componentRoots != null and componentRoots.size() > 0">
        and rootprojects.enabled=${_true}
        and rootprojects.kee in
        <foreach item="componentRoot" index="index" collection="componentRoots" open="(" separator="," close=")">
          #{componentRoot}
        </foreach>
        and rootsnapshots.project_id=rootprojects.id
        and rootsnapshots.islast=${_true}
        and (s.id=rootsnapshots.id or ((s.root_snapshot_id=rootsnapshots.id or s.root_snapshot_id=rootsnapshots.root_snapshot_id) and
        <choose>
          <when test="_databaseId == 'mssql'">
            s.path LIKE rootsnapshots.path + CAST(rootsnapshots.id AS varchar(15)) + '.%'
          </when>
          <when test="_databaseId == 'mysql'">
            s.path LIKE concat(rootsnapshots.path, rootsnapshots.id, '.%')
          </when>
          <otherwise>
            s.path LIKE rootsnapshots.path || rootsnapshots.id || '.%'
          </otherwise>
        </choose>
        ))
        and s.islast=${_true}
        and i.resource_id=s.project_id
      </if>
      <if test="components != null">
        and project_component.enabled=${_true}
        and project_component.kee in
        <foreach item="component" index="index" collection="components" open="(" separator="," close=")">#{component}
        </foreach>
        and i.resource_id=project_component.id
      </if>
      <if test="issueKeys != null">
        and i.kee in
        <foreach item="key" index="index" collection="issueKeys" open="(" separator="," close=")">#{key}
        </foreach>
      </if>
      <if test="severities != null">
        and i.severity in
        <foreach item="severity" index="index" collection="severities" open="(" separator="," close=")">#{severity}
        </foreach>
      </if>
      <if test="statuses != null">
        and i.status in
        <foreach item="status" index="index" collection="statuses" open="(" separator="," close=")">#{status}
        </foreach>
      </if>
      <if test="resolutions != null">
        and i.resolution in
        <foreach item="resolution" index="index" collection="resolutions" open="(" separator="," close=")">#{resolution}
        </foreach>
      </if>
      <if test="resolved != null">
        <if test="resolved == true">
          and i.resolution is not null
        </if>
        <if test="resolved == false">
          and i.resolution is null
        </if>
      </if>
      <if test="reporters != null">
        and i.reporter in
        <foreach item="reporter" index="index" collection="reporters" open="(" separator="," close=")">#{reporter}
        </foreach>
      </if>
      <if test="assignees != null">
        and i.assignee in
        <foreach item="assignee" index="index" collection="assignees" open="(" separator="," close=")">#{assignee}
        </foreach>
      </if>
      <if test="assigned != null">
        <if test="assigned == true">
          and i.assignee is not null
        </if>
        <if test="assigned == false">
          and i.assignee is null
        </if>
      </if>
      <if test="planned != null">
        <if test="planned == true">
          and i.action_plan_key is not null
        </if>
        <if test="planned == false">
          and i.action_plan_key is null
        </if>
      </if>
      <if test="rules != null and rules.size() > 0">
        and (<foreach item="rule" index="index" collection="rules" open="(" separator=" or " close=")">
        r.plugin_name=#{rule.repository} and r.plugin_rule_key=#{rule.rule}</foreach>)
      </if>
      <if test="actionPlans != null">
        and i.action_plan_key in
        <foreach item="action_plan" index="index" collection="actionPlans" open="(" separator="," close=")">
          #{action_plan}
        </foreach>
      </if>
      <if test="createdAfter != null">
        and i.issue_creation_date &gt;= #{createdAfter}
      </if>
      <if test="createdBefore != null">
        and i.issue_creation_date &lt; #{createdBefore}
      </if>
    </where>
    <if test="sort == null">
      order by i.id
    </if>
    <include refid="sortFilter"/>
  </sql>

</mapper>

