<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mappei.dtd">

<mapper namespace="org.sonar.core.issue.IssueMapper">

  <sql id="issueColumns">
    i.id,
    i.uuid as uuid,
    i.resource_id as resourceId,
    i.rule_id as ruleId,
    i.severity as severity,
    i.manual_severity as manualSeverity,
    i.manual_issue as manualIssue,
    i.title as title,
    i.message as message,
    i.line as line,
    i.cost as cost,
    i.status as status,
    i.resolution as resolution,
    i.checksum as checksum,
    i.user_login as userLogin,
    i.assignee_login as assigneeLogin,
    i.person_id as personId,
    i.data as data,
    i.created_at as createdAt,
    i.updated_at as updatedAt,
    i.closed_at as closedAt,
    r.plugin_rule_key as rule,
    r.plugin_name as ruleRepo,
    p.kee as componentKey
  </sql>

  <insert id="insert" parameterType="Issue" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO issues (uuid, resource_id, rule_id, severity, manual_severity, manual_issue, title, message, line, cost, status,
    resolution, checksum, user_login, assignee_login, person_id, data, created_at, updated_at, closed_at)
    VALUES (#{uuid}, #{resourceId}, #{ruleId}, #{severity}, #{manualSeverity}, #{manualIssue}, #{title}, #{message}, #{line}, #{cost}, #{status},
    #{resolution}, #{checksum}, #{userLogin}, #{assigneeLogin}, #{personId}, #{data}, #{createdAt}, #{updatedAt}, #{closedAt})
  </insert>

  <!-- Oracle -->
  <insert id="insert" databaseId="oracle" parameterType="Issue" keyColumn="id" useGeneratedKeys="true" keyProperty="id">
    <selectKey order="BEFORE" resultType="Long" keyProperty="id">
      select issues_seq.NEXTVAL from DUAL
    </selectKey>
    INSERT INTO issues (id, uuid, resource_id, rule_id, severity, manual_severity, manual_issue, title, message, line, cost, status,
    resolution, checksum, user_login, assignee_login, person_id, data, created_at, updated_at, closed_at)
    VALUES (#{id}, #{uuid}, #{resourceId}, #{ruleId}, #{severity}, #{manualSeverity}, #{manualIssue}, #{title}, #{message}, #{line}, #{cost}, #{status},
    #{resolution}, #{checksum}, #{userLogin}, #{assigneeLogin}, #{personId}, #{data}, #{createdAt}, #{updatedAt}, #{closedAt})
  </insert>

  <update id="update" parameterType="Issue">
    update issues set
    resource_id=#{resourceId},
    rule_id=#{ruleId},
    severity=#{severity},
    manual_severity=#{manualSeverity},
    manual_issue=#{manualIssue},
    title=#{title},
    message=#{message},
    line=#{line},
    cost=#{cost},
    status=#{status},
    resolution=#{resolution},
    checksum=#{checksum},
    user_login=#{userLogin},
    assignee_login=#{assigneeLogin},
    person_id=#{personId},
    data=#{data},
    created_at=#{createdAt},
    updated_at=#{updatedAt},
    closed_at=#{closedAt}
    where uuid = #{uuid}
  </update>

  <select id="selectById" parameterType="long" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i, rules r, projects p
    where i.id=#{id} and i.rule_id=r.id and p.id=i.resource_id
  </select>

  <select id="selectByKey" parameterType="String" resultType="Issue">
    select
    <include refid="issueColumns"/>
    from issues i, rules r, projects p
    where i.uuid=#{uuid} and i.rule_id=r.id and p.id=i.resource_id
  </select>

  <select id="selectOpenIssues" parameterType="String" resultType="Issue">
    select distinct
    <include refid="issueColumns"/>
    from issues i, rules r, projects p
    where i.status &lt;&gt; 'CLOSED'
      and (p.root_id=#{componentId} or (p.root_id is null and p.id=#{componentId}))
      and i.resource_id=p.id
      and r.id=i.rule_id
  </select>

  <select id="select" parameterType="map" resultType="Issue">
    select
    <include refid="issueColumns"/>
    <include refid="selectQueryConditions"/>
  </select>

  <sql id="selectQueryConditions">
    from issues i, projects p, rules r
    <if test="componentRoots != null and componentRoots.size() > 0">
      , projects rootprojects, snapshots rootsnapshots, snapshots s
    </if>
    <if test="components != null and components.size() > 0">
      , projects project_component
    </if>
    <where>
      p.id=i.resource_id and i.rule_id=r.id
      <if test="componentRoots != null and componentRoots.size() > 0">
        and rootprojects.enabled=${_true}
        and rootprojects.kee in
        <foreach item="componentRoot" index="index" collection="componentRoots" open="(" separator="," close=")">
          #{componentRoot}
        </foreach>
        and rootsnapshots.project_id=rootprojects.id
        and rootsnapshots.islast=${_true}
        and (s.id=rootsnapshots.id or (s.root_snapshot_id=rootsnapshots.id and
        <choose>
          <when test="_databaseId == 'mssql'">
            s.path LIKE rootsnapshots.path + CAST(rootsnapshots.id AS varchar(15)) + '.%'
          </when>
          <otherwise>
            s.path LIKE rootsnapshots.path || rootsnapshots.id || '.%'
          </otherwise>
        </choose>
        ))
        and s.islast=${_true}
        and i.resource_id=s.project_id
      </if>
      <if test="components != null">
        and project_component.enabled=${_true}
        and project_component.kee in
        <foreach item="component" index="index" collection="components" open="(" separator="," close=")">#{component}
        </foreach>
        and i.resource_id=project_component.id
      </if>
      <if test="keys != null">
        and i.uuid in
        <foreach item="key" index="index" collection="keys" open="(" separator="," close=")">#{key}
        </foreach>
      </if>
      <if test="severities != null">
        and i.severity in
        <foreach item="severity" index="index" collection="severities" open="(" separator="," close=")">#{severity}
        </foreach>
      </if>
      <if test="statuses != null">
        and i.status in
        <foreach item="status" index="index" collection="statuses" open="(" separator="," close=")">#{status}
        </foreach>
      </if>
      <if test="resolutions != null">
        and i.resolution in
        <foreach item="resolution" index="index" collection="resolutions" open="(" separator="," close=")">#{resolution}
        </foreach>
      </if>
      <if test="userLogins != null">
        and i.user_login in
        <foreach item="userLogin" index="index" collection="userLogins" open="(" separator="," close=")">#{userLogin}
        </foreach>
      </if>
      <if test="assigneeLogins != null">
        and i.assignee_login in
        <foreach item="assigneeLogin" index="index" collection="assigneeLogins" open="(" separator="," close=")">#{assigneeLogin}
        </foreach>
      </if>
      <if test="rules != null and rules.size() > 0">
        and (<foreach item="rule" index="index" collection="rules" open="(" separator=" or " close=")">r.plugin_name=#{rule.repository} and r.plugin_rule_key=#{rule.rule}</foreach>)
      </if>
      <if test="createdAfter">
        and i.created_at &gt; #{createdAfter}
      </if>
      <if test="createdBefore">
        and i.created_at &lt; #{createdBefore}
      </if>
    </where>
  </sql>

</mapper>

