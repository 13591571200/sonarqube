description = 'Code of the Compute Engine task processing project analysis reports'

sonarqube {
  properties {
    property 'sonar.projectName', "${projectTitle} :: Compute Engine :: Task :: Project Analysis"
  }
}

sourceSets {
  test {
    resources {
      srcDirs += ['src/test/projects']
    }
  }
}

configurations {
  tests
  testCompile.extendsFrom compileOnly
}

dependencies {
  // please keep the list grouped by configuration and ordered by name

  compile 'org.slf4j:jul-to-slf4j'
  compile 'org.slf4j:slf4j-api'

  compile 'commons-codec:commons-codec'
  compile 'commons-io:commons-io'
  compile 'commons-lang:commons-lang'
  compile 'com.google.code.gson:gson'
  compile 'com.google.guava:guava'
  compile 'com.google.code.findbugs:jsr305'
  compile 'com.google.protobuf:protobuf-java'
  compile 'com.googlecode.java-diff-utils:diffutils'
  compile 'org.mybatis:mybatis'
  compile 'org.picocontainer:picocontainer'
  
  compile project(':sonar-core')
  compile project(':server:sonar-ce-task')
  compile project(':server:sonar-db-migration')
  compile project(':server:sonar-process')
  compile project(':server:sonar-server-common')
  compile project(path: ':sonar-plugin-api', configuration: 'shadow')
  compile project(':sonar-plugin-api-impl')
  compile project(':sonar-duplications')
  compile project(':sonar-scanner-protocol')

  compileOnly 'com.google.code.findbugs:jsr305'

  testCompile 'com.google.code.findbugs:jsr305'
  testCompile 'com.tngtech.java:junit-dataprovider'
  testCompile 'junit:junit'
  testCompile 'org.apache.logging.log4j:log4j-api'
  testCompile 'org.apache.logging.log4j:log4j-core'
  testCompile 'org.assertj:assertj-core'
  testCompile 'org.assertj:assertj-guava'
  testCompile 'org.mockito:mockito-core'
  testCompile 'org.reflections:reflections'
  testCompile project(':server:sonar-db-testing')
  testCompile project(':sonar-testing-harness')
  testCompile project(path: ":server:sonar-ce-task", configuration: "tests")
  testCompile project(path: ":server:sonar-server-common", configuration: "tests")
}

task testJar(type: Jar) {
  classifier = 'tests'
  from sourceSets.test.output
}

artifacts {
 tests testJar
}
