<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.permission.AuthorizationMapper">

  <select id="selectOrganizationPermissions" parameterType="map" resultType="string">
    select gr.role
    from group_roles gr
    inner join groups_users gu on gr.group_id=gu.group_id
    where
    gr.organization_uuid=#{organizationUuid, jdbcType=VARCHAR} and
    gr.component_uuid is null and
    gu.user_id=#{userId, jdbcType=INTEGER}

    union

    select gr.role
    from group_roles gr
    where
    gr.organization_uuid=#{organizationUuid, jdbcType=VARCHAR} and
    gr.group_id is null and
    gr.component_uuid is null

    union

    select ur.role
    from user_roles ur
    where
    ur.organization_uuid=#{organizationUuid, jdbcType=VARCHAR} and
    ur.user_id=#{userId, jdbcType=INTEGER}
    and ur.component_uuid is null
  </select>

  <select id="selectOrganizationPermissionsOfAnonymous" parameterType="map" resultType="string">
    select gr.role
    from group_roles gr
    where
    gr.organization_uuid=#{organizationUuid, jdbcType=VARCHAR} and
    gr.component_uuid is null and
    gr.group_id is null
  </select>

  <select id="countUsersWithGlobalPermissionExcludingGroup" parameterType="map" resultType="int">
    select count(1) from
    (
      select gu.user_id
      from groups_users gu
      inner join group_roles gr on gr.group_id = gu.group_id
      where
      gr.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
      gr.role = #{permission, jdbcType=VARCHAR} and
      gr.component_uuid is null and
      gr.group_id is not null and
      gr.group_id != #{excludedGroupId, jdbcType=INTEGER}

      union

      select ur.user_id
      from user_roles ur
      where
      ur.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
      ur.component_uuid is null and
      ur.role = #{permission, jdbcType=VARCHAR}
    ) remaining
  </select>

  <select id="countUsersWithGlobalPermissionExcludingUser" parameterType="map" resultType="int">
    select count(1) from
    (
    select gu.user_id
    from groups_users gu
    inner join group_roles gr on gr.group_id = gu.group_id
    where
    gr.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
    gr.role = #{permission, jdbcType=VARCHAR} and
    gr.component_uuid is null and
    gr.group_id is not null and
    gu.user_id != #{excludedUserId, jdbcType=INTEGER}

    union

    select ur.user_id
    from user_roles ur
    where
    ur.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
    ur.component_uuid is null and
    ur.role = #{permission, jdbcType=VARCHAR} and
    ur.user_id != #{excludedUserId, jdbcType=INTEGER}
    ) remaining
  </select>

  <select id="selectUserIdsWithGlobalPermission" parameterType="map" resultType="int">
    select gu.user_id
    from groups_users gu
    inner join group_roles gr on gr.group_id = gu.group_id
    where
    gr.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
    gr.role = #{permission, jdbcType=VARCHAR} and
    gr.component_uuid is null and
    gr.group_id is not null

    union

    select ur.user_id
    from user_roles ur
    where
    ur.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
    ur.component_uuid is null and
    ur.role = #{permission, jdbcType=VARCHAR}
  </select>

  <select id="countUsersWithGlobalPermissionExcludingGroupMember" parameterType="map" resultType="int">
    select count(1) from
    (
    select gu.user_id
    from groups_users gu
    inner join group_roles gr on gr.group_id = gu.group_id
    where
    gr.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
    gr.role = #{permission, jdbcType=VARCHAR} and
    gr.component_uuid is null and
    gr.group_id is not null and
    (gu.group_id != #{groupId, jdbcType=INTEGER} or gu.user_id != #{userId, jdbcType=INTEGER})

    union

    select ur.user_id
    from user_roles ur
    where
    ur.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
    ur.component_uuid is null and
    ur.role = #{permission, jdbcType=VARCHAR}
    ) remaining
  </select>

  <select id="countUsersWithGlobalPermissionExcludingUserPermission" parameterType="map" resultType="int">
    select count(1) from
    (
    select gu.user_id
    from groups_users gu
    inner join group_roles gr on gr.group_id = gu.group_id
    where
    gr.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
    gr.role = #{permission, jdbcType=VARCHAR} and
    gr.component_uuid is null and
    gr.group_id is not null

    union

    select ur.user_id
    from user_roles ur
    where
    ur.organization_uuid = #{organizationUuid, jdbcType=VARCHAR} and
    ur.component_uuid is null and
    ur.role = #{permission, jdbcType=VARCHAR} and
    ur.user_id != #{userId, jdbcType=INTEGER}
    ) remaining
  </select>

  <select id="selectOrganizationUuidsOfUserWithGlobalPermission" parameterType="map" resultType="String">
    select gr.organization_uuid
    from group_roles gr
    inner join groups_users gu on gr.group_id = gu.group_id
    where
    gr.role = #{permission, jdbcType=VARCHAR} and
    gr.component_uuid is null and
    gr.group_id is not null and
    gu.user_id = #{userId, jdbcType=INTEGER}

    union

    select ur.organization_uuid
    from user_roles ur
    where
    ur.component_uuid is null and
    ur.role = #{permission, jdbcType=VARCHAR} and
    ur.user_id = #{userId, jdbcType=INTEGER}
  </select>

  <select id="keepAuthorizedProjectUuidsForUser" parameterType="map" resultType="String">
    select
      gr.component_uuid
    from
      group_roles gr
    where
      gr.role=#{role, jdbcType=VARCHAR}
      and (
        gr.group_id is null
        or exists (
          select
            1
          from
            groups_users gu
          where
            gu.user_id = #{userId, jdbcType=INTEGER}
            and gr.group_id = gu.group_id
        )
      )
      and <foreach collection="projectUuids" open="(" close=")" item="element" index="index" separator=" or ">
            gr.component_uuid=#{element, jdbcType=VARCHAR}
          </foreach>

    union

    select
      p.uuid
    from
      user_roles ur
    inner join components p on
      p.uuid = ur.component_uuid
    where
      ur.role=#{role, jdbcType=VARCHAR}
      and ur.user_id=#{userId, jdbcType=INTEGER}
      and <foreach collection="projectUuids" open="(" close=")" item="element" index="index" separator=" or ">
        p.uuid=#{element, jdbcType=VARCHAR}
      </foreach>

    union

    <include refid="sqlSelectPublicProjectsIfRole"/>
  </select>

  <sql id="sqlSelectPublicProjectsIfRole">
    select
    p.uuid
    from
    components p
    where
    <foreach collection="projectUuids" open="(" close=")" item="element" index="index" separator=" or ">
      p.uuid=#{element ,jdbcType=VARCHAR}
    </foreach>
    and p.private = ${_false}
    and #{role, jdbcType=VARCHAR} in ('user','codeviewer')
  </sql>

    <select id="keepAuthorizedProjectUuidsForAnonymous" parameterType="map" resultType="String">
    select
      gr.component_uuid
    from
      group_roles gr
    where
      gr.role=#{role, jdbcType=VARCHAR}
      and gr.group_id is null
      and <foreach collection="projectUuids" open="(" close=")" item="element" index="index" separator=" or ">
            gr.component_uuid=#{element, jdbcType=VARCHAR}
          </foreach>

    union

    <include refid="sqlSelectPublicProjectsIfRole"/>
  </select>

  <select id="keepAuthorizedUsersForRoleAndProject" parameterType="map" resultType="int">
    select
      gu.user_id
    from
      groups_users gu
    inner join group_roles gr on
      gr.group_id=gu.group_id
    where
      gr.component_uuid=#{componentUuid, jdbcType=VARCHAR}
      and gr.role=#{role, jdbcType=VARCHAR}
      and gu.user_id in
        <foreach collection="userIds" open="(" close=")" item="id" separator=",">
          #{id, jdbcType=BIGINT}
        </foreach>

    union

    select
      ur.user_id
    from
      user_roles ur
    where
      ur.component_uuid=#{componentUuid, jdbcType=VARCHAR}
      and ur.role=#{role, jdbcType=VARCHAR}
      and ur.user_id IN
        <foreach collection="userIds" open="(" close=")" item="id" separator=",">
          #{id, jdbcType=BIGINT}
        </foreach>

    union

    select
      u.id
    from
      users u
    where
      u.id in
        <foreach collection="userIds" open="(" close=")" item="id" separator=",">
          #{id, jdbcType=BIGINT}
        </foreach>
      and exists (
        select
          1
        from
          components p
        where
          p.uuid =#{componentUuid, jdbcType=VARCHAR}
          and p.private = ${_false}
          and #{role, jdbcType=VARCHAR} in ('user','codeviewer')
      )
  </select>

  <select id="selectProjectPermissions" parameterType="map" resultType="String">
    select ur.role
    from user_roles ur
    inner join components p on p.uuid = ur.component_uuid
    where
      p.uuid = #{projectUuid, jdbcType=VARCHAR} and
      p.organization_uuid = ur.organization_uuid and
      ur.user_id = #{userId, jdbcType=BIGINT}

    union

    select gr.role
    from group_roles gr
    inner join groups_users gu on gr.group_id = gu.group_id
    inner join components p on p.uuid = gr.component_uuid
    where
      p.uuid = #{projectUuid, jdbcType=VARCHAR} and
      p.organization_uuid = gr.organization_uuid and
      gu.user_id = #{userId, jdbcType=BIGINT}

    union

    <include refid="sql_selectProjectPermissionsOfAnonymous"/>
  </select>

  <select id="selectProjectPermissionsOfAnonymous" parameterType="map" resultType="String">
    <include refid="sql_selectProjectPermissionsOfAnonymous"/>
  </select>

  <sql id="sql_selectProjectPermissionsOfAnonymous">
    select
      gr.role
    from
      group_roles gr
    inner join components p on
      p.uuid = gr.component_uuid
    where
      p.uuid = #{projectUuid, jdbcType=VARCHAR}
      and p.organization_uuid = gr.organization_uuid
      and gr.group_id is null
  </sql>

  <select id="selectEmailSubscribersWithGlobalPermission" parameterType="map" resultType="org.sonar.db.EmailSubscriberDto">
    select
      u.login as "login",
      ${_true} as "global",
      u.email as "email"
    from
      users u
    inner join user_roles ur on
      ur.user_id = u.id
      and ur.role=#{permission, jdbcType=VARCHAR}
      and ur.component_uuid is null
    where
      u.email is not null

    union

    select
      u.login as "login",
      ${_true} as "global",
      u.email as "email"
    from users u
    inner join groups_users gu on
      u.id=gu.user_id
    inner join group_roles gr on
      gr.group_id = gu.group_id
      and gr.role = #{permission, jdbcType=VARCHAR}
      and gr.component_uuid is null
    where
      u.email is not null

  </select>

  <select id="keepAuthorizedLoginsOnProject" parameterType="map" resultType="String">
    select u.login
    from users u
    where
      u.login in <foreach collection="logins" open="(" close=")" item="login" separator=",">#{login, jdbcType=VARCHAR}</foreach>
      and (
        exists (
          select 1
          from user_roles ur
          inner join components p on p.uuid = ur.component_uuid and p.organization_uuid = ur.organization_uuid
          where
            p.kee =  #{projectKey, jdbcType=VARCHAR}
            and ur.role = #{permission, jdbcType=VARCHAR}
            and ur.user_id = u.id
        ) or exists (
          select 1
          from components p
          inner join group_roles gr on gr.component_uuid = p.uuid and gr.organization_uuid = p.organization_uuid
          inner join groups_users gu on gu.group_id = gr.group_id
          where
            p.kee  =  #{projectKey, jdbcType=VARCHAR}
            and gu.user_id = u.id
            and gr.role = #{permission, jdbcType=VARCHAR}
        )
        <if test="permission == 'user' or permission == 'codeviewer'">
          or exists (
            select 1
            from components p
            where
              p.kee =  #{projectKey, jdbcType=VARCHAR}
              and p.private = ${_false}
          )
        </if>
      )
  </select>
</mapper>
