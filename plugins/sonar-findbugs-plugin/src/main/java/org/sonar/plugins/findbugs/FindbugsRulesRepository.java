/*
 * Sonar, open source software quality management tool.
 * Copyright (C) 2009 SonarSource SA
 * mailto:contact AT sonarsource DOT com
 *
 * Sonar is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Sonar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Sonar; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonar.plugins.findbugs;

import org.apache.commons.lang.StringUtils;
import org.sonar.api.CoreProperties;
import org.sonar.api.profiles.RulesProfile;
import org.sonar.api.resources.Java;
import org.sonar.api.rules.*;
import org.sonar.plugins.findbugs.xml.FindBugsFilter;

import java.util.*;

public class FindbugsRulesRepository extends AbstractRulesRepository<Java, FindbugsRulePriorityMapper> implements ConfigurationImportable, ConfigurationExportable {

  public FindbugsRulesRepository(Java language) {
    super(language, new FindbugsRulePriorityMapper());
  }

  @Override
  public String getRepositoryResourcesBase() {
    return "org/sonar/plugins/findbugs";
  }

  @Override
  public List<Rule> parseReferential(String fileContent) {
    return new StandardRulesXmlParser().parse(fileContent);
  }

  public List<RulesProfile> getProvidedProfiles() {
    RulesProfile profile = new RulesProfile(RulesProfile.SONAR_WAY_FINDBUGS_NAME, Java.KEY);
    List<Rule> rules = getInitialReferential();
    ArrayList<ActiveRule> activeRules = new ArrayList<ActiveRule>();
    for (Rule rule : rules) {
      activeRules.add(new ActiveRule(profile, rule, null));
    }
    profile.setActiveRules(activeRules);
    return Arrays.asList(profile);
  }

  public String exportConfiguration(RulesProfile activeProfile) {
    FindBugsFilter filter = FindBugsFilter.fromActiveRules(activeProfile.getActiveRulesByPlugin(CoreProperties.FINDBUGS_PLUGIN));
    return addHeaderToXml(filter.toXml());
  }

  private static String addHeaderToXml(String xmlModules) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Generated by Sonar -->\n".concat(xmlModules);
  }

  public List<ActiveRule> importConfiguration(String xml, List<Rule> rules) {
    FindBugsFilter filter = FindBugsFilter.fromXml(xml);

    Set<ActiveRule> result = new HashSet<ActiveRule>();

    for (Map.Entry<String, RulePriority> categoryLevel : filter.getCategoryLevels(getRulePriorityMapper()).entrySet()) {
      completeActiveRulesByCategory(result, rules, categoryLevel.getKey(), categoryLevel.getValue());
    }

    for (Map.Entry<String, RulePriority> codeLevel : filter.getCodeLevels(getRulePriorityMapper()).entrySet()) {
      completeActiveRulesByCode(result, rules, codeLevel.getKey(), codeLevel.getValue());
    }

    for (Map.Entry<String, RulePriority> patternLevel : filter.getPatternLevels(getRulePriorityMapper()).entrySet()) {
      completeActiveRulesByPattern(result, rules, patternLevel.getKey(), patternLevel.getValue());
    }

    return new ArrayList<ActiveRule>(result);
  }

  private void completeActiveRulesByCategory(Set<ActiveRule> result, List<Rule> rules, String findbugsCategory, RulePriority priority) {
    for (Rule rule : rules) {
      String sonarCateg = Category.findbugsToSonar(findbugsCategory);
      if (sonarCateg != null && rule.getName().startsWith(sonarCateg)) {
        result.add(new ActiveRule(null, rule, priority));
      }
    }
  }

  private void completeActiveRulesByCode(Set<ActiveRule> result, List<Rule> rules, String findbugsCode, RulePriority priority) {
    for (Rule rule : rules) {
      if (rule.getKey().equals(findbugsCode) || StringUtils.startsWith(rule.getKey(), findbugsCode + "_")) {
        result.add(new ActiveRule(null, rule, priority));
      }
    }
  }

  private void completeActiveRulesByPattern(Set<ActiveRule> result, List<Rule> rules, String findbugsPattern, RulePriority priority) {
    for (Rule rule : rules) {
      if (rule.getKey().equals(findbugsPattern)) {
        result.add(new ActiveRule(null, rule, priority));
      }
    }
  }
}
