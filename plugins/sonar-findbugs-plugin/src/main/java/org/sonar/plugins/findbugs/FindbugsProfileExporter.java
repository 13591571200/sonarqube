/*
 * Sonar, open source software quality management tool.
 * Copyright (C) 2008-2012 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * Sonar is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Sonar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Sonar; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */
package org.sonar.plugins.findbugs;

import org.sonar.api.profiles.ProfileExporter;
import org.sonar.api.profiles.RulesProfile;
import org.sonar.api.resources.Java;
import org.sonar.api.rules.ActiveRule;
import org.sonar.api.utils.SonarException;
import org.sonar.plugins.findbugs.xml.Bug;
import org.sonar.plugins.findbugs.xml.ClassFilter;
import org.sonar.plugins.findbugs.xml.FindBugsFilter;
import org.sonar.plugins.findbugs.xml.Match;

import java.io.IOException;
import java.io.Writer;
import java.util.List;

public class FindbugsProfileExporter extends ProfileExporter {

  public FindbugsProfileExporter() {
    super(FindbugsConstants.REPOSITORY_KEY, FindbugsConstants.PLUGIN_NAME);

    setSupportedLanguages(Java.KEY);
    setMimeType("application/xml");
  }

  @Override
  public void exportProfile(RulesProfile profile, Writer writer) {
    try {
      String xml = exportProfileAndInclusions(profile, null);
      writer.write(xml);
    } catch (IOException e) {
      throw new SonarException("Fail to export Findbugs profile: " + profile.getName(), e);
    }
  }

  public String exportProfileAndInclusions(RulesProfile profile, String[] inclusions) {
    FindBugsFilter root = new FindBugsFilter();
    addRules(root, profile.getActiveRulesByRepository(FindbugsConstants.REPOSITORY_KEY));
    addPatterns(root, inclusions);
    return toXml(root);
  }

  public String exportExclusions(String[] exclusions) {
    FindBugsFilter root = new FindBugsFilter();
    addPatterns(root, exclusions);
    return toXml(root);
  }

  private static String toXml(FindBugsFilter root) {
    return new StringBuilder()
        .append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
        .append("<!-- Generated by Sonar -->\n")
        .append(root.toXml())
        .toString();
  }

  private static void addPatterns(FindBugsFilter root, String[] patterns) {
    if (patterns != null) {
      for (String pattern : patterns) {
        ClassFilter classFilter = new ClassFilter(FindbugsAntConverter.antToJavaRegexpConvertor(pattern));
        root.addMatch(new Match(classFilter));
      }
    }
  }

  protected static void addRules(FindBugsFilter root, List<ActiveRule> activeRules) {
    for (ActiveRule activeRule : activeRules) {
      if (FindbugsConstants.REPOSITORY_KEY.equals(activeRule.getRepositoryKey())) {
        Match child = new Match();
        child.setBug(new Bug(activeRule.getConfigKey()));
        root.addMatch(child);
      }
    }
  }
}
